---
import "../../../../styles/global.css";
import Header from "../../../../components/Header.astro";
import Footer from "../../../../components/Footer.astro";
import {
  getNovels,
  getChapters,
  getNovelDetails,
  getChapter,
} from "../../../../lib/mongodb.ts";

// üåü Generar rutas para todos los cap√≠tulos
export async function getStaticPaths() {
  const novels = await getNovels();
  const paths: { params: { id: string; capitulo: string } }[] = [];

  for (const novel of novels) {
    const chapters = await getChapters(novel.id);
    for (const ch of chapters) {
      paths.push({
        params: { id: novel.id.toString(), capitulo: ch.chapterId.toString() },
      });
    }
  }

  return paths;
}

const { id, capitulo } = Astro.params;

// üìñ Obtener datos desde MongoDB
const novel = await getNovelDetails(id);
const chapter = await getChapter(id, capitulo);

// Manejo de errores si no se encuentra el cap√≠tulo
if (!novel || !chapter) {
  throw new Error("Novela o cap√≠tulo no encontrado.");
}

// √çndices para navegaci√≥n
const chapters = await getChapters(id);
const currentIndex = chapters.findIndex(
  (c) => c.chapterId.toString() === capitulo
);
const prevChapter = currentIndex > 0 ? chapters[currentIndex - 1] : null;
const nextChapter =
  currentIndex < chapters.length - 1 ? chapters[currentIndex + 1] : null;

// Preparar contenido HTML
const chapterContent = chapter.content
  ? chapter.content.map((p: string) => `<p>${p}</p>`).join("")
  : `<p>Contenido no disponible</p>`;

// Color seg√∫n categor√≠a
let accentColor = "purple";
if (novel.category === "Romance Oscuro") accentColor = "red";
else if (novel.category === "Historia Alternativa") accentColor = "emerald";
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{chapter.title} - {novel.title} - Vane S√°nchez</title>
    <meta
      name="description"
      content={`Lee ${chapter.title} de ${novel.title} por Vane S√°nchez`}
    />
  </head>
  <body
    class="font-serif bg-gradient-to-br from-slate-50 to-blue-100 min-h-screen text-gray-800"
  >
    <Header />
    <main class="mt-24 min-h-screen">
      <div class="max-w-4xl mx-auto px-4 py-8">
        <!-- Navegaci√≥n superior -->
        <div class="flex justify-between items-center mb-8">
          <a
            href={`/libro/${novel.id}`}
            class={`text-${accentColor}-600 hover:text-${accentColor}-800 font-semibold transition-colors`}
          >
            ‚Üê Volver al libro
          </a>
          <h1 class="text-xl font-bold text-gray-800 text-center">
            {novel.title}
          </h1>
          <div class="w-32"></div>
        </div>

        <!-- Contenido del cap√≠tulo -->
        <article
          class="bg-white/90 backdrop-blur-sm rounded-2xl shadow-xl p-8 mb-8"
        >
          <header class="mb-8 text-center border-b border-gray-200 pb-6">
            <h1 class="text-3xl font-bold text-gray-800 mb-2">
              {chapter.title}
            </h1>
            <p class="text-gray-600">
              Cap√≠tulo {currentIndex + 1} de {chapters.length}
            </p>
          </header>
          <div
            class="prose prose-lg max-w-none text-gray-700 leading-relaxed"
            set:html={chapterContent}
          />
        </article>

        <!-- Navegaci√≥n inferior -->
        <div
          class="flex items-center justify-between bg-white/80 backdrop-blur-sm rounded-xl p-6 shadow-lg mb-8"
        >
          <div class="w-24">
            {
              prevChapter ? (
                <a
                  href={`/libro/${novel.id}/capitulo/${prevChapter.chapterId}`}
                  class={`flex items-center text-${accentColor}-600 hover:text-${accentColor}-800 font-semibold transition-colors group`}
                >
                  <span class="group-hover:-translate-x-1 transition-transform">
                    ‚Üê
                  </span>
                  <span class="ml-2">Anterior</span>
                </a>
              ) : (
                <span class="invisible">Placeholder</span>
              )
            }
          </div>

          <div class="flex-1 mx-4">
            <label
              for="chapterSelect"
              class="block mb-2 font-semibold text-gray-800 text-center"
              >üìö Selecciona un cap√≠tulo:</label
            >
            <select
              id="chapterSelect"
              class="w-full bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg p-2.5"
              onchange="window.location.href=this.value"
            >
              {
                chapters.map((ch) => (
                  <option
                    value={`/libro/${novel.id}/capitulo/${ch.chapterId}`}
                    selected={ch.chapterId.toString() === capitulo}
                  >
                    {ch.chapterId - 1}. {ch.title}
                  </option>
                ))
              }
            </select>
          </div>

          <div class="w-24 text-right">
            {
              nextChapter ? (
                <a
                  href={`/libro/${novel.id}/capitulo/${nextChapter.chapterId}`}
                  class={`flex items-center justify-end text-${accentColor}-600 hover:text-${accentColor}-800 font-semibold transition-colors group`}
                >
                  <span class="mr-2">Siguiente</span>
                  <span class="group-hover:translate-x-1 transition-transform">
                    ‚Üí
                  </span>
                </a>
              ) : (
                <span class="invisible">Placeholder</span>
              )
            }
          </div>

          <div class="absolute right-4 bottom-2 text-gray-500 text-sm">
            {currentIndex + 1} / {chapters.length}
          </div>
        </div>
      </div>
    </main>
    <Footer />
  </body>
</html>
